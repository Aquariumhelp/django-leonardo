# -*- coding: utf-8 -*-
from __future__ import unicode_literals

from django.db import models, migrations
import feincms.contrib.fields
import feincms.contrib.richtext
import feincms.module.medialibrary.fields
import django_extensions.db.fields.json
import feincms.module.extensions.datepublisher
import feincms.module.mixins
import feincms.extensions


class Migration(migrations.Migration):

    dependencies = [
        ('medialibrary', '__first__'),
    ]

    operations = [
        migrations.CreateModel(
            name='ApplicationContent',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('parameters', feincms.contrib.fields.JSONField(null=True, editable=False)),
                ('region', models.CharField(max_length=255)),
                ('ordering', models.IntegerField(default=0, verbose_name='ordering')),
                ('urlconf_path', models.CharField(max_length=100, verbose_name='application', choices=[(b'hrcms.portal.device_catalog.urls', b'Robotice Device Catalog'), (b'hrcms.module.eshop.urls', b'Eshop'), (b'hrcms.module.eshop.api.urls', b'Eshop API'), (b'hrcms.module.auth.urls', b'API Auth')])),
            ],
            options={
                'ordering': ['ordering'],
                'abstract': False,
                'verbose_name_plural': 'application contents',
                'db_table': 'page_page_applicationcontent',
                'verbose_name': 'application content',
                'permissions': [],
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='BreadcrumbsWidget',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('options', django_extensions.db.fields.json.JSONField(verbose_name='widget options', editable=False, blank=True)),
                ('prerendered_content', models.TextField(verbose_name='prerendered content', editable=False, blank=True)),
                ('orientation', models.CharField(default=b'horizontal', max_length=255, verbose_name='orientation', choices=[(b'horizontal', 'horizontal'), (b'vertical', 'vertical')])),
                ('root_label', models.CharField(max_length=255, null=True, verbose_name='root label', blank=True)),
                ('region', models.CharField(max_length=255)),
                ('ordering', models.IntegerField(default=0, verbose_name='ordering')),
            ],
            options={
                'ordering': ['ordering'],
                'abstract': False,
                'verbose_name_plural': 'breadcrumbs',
                'db_table': 'page_page_breadcrumbswidget',
                'verbose_name': 'breadcrumbs',
                'permissions': [],
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='ContentNavigationWidget',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('options', django_extensions.db.fields.json.JSONField(verbose_name='widget options', editable=False, blank=True)),
                ('prerendered_content', models.TextField(verbose_name='prerendered content', editable=False, blank=True)),
                ('include_contextual_pages', models.BooleanField(default=False, verbose_name='include contextual pages')),
                ('include_text_headers', models.BooleanField(default=False, verbose_name='include text headers')),
                ('region', models.CharField(max_length=255)),
                ('ordering', models.IntegerField(default=0, verbose_name='ordering')),
            ],
            options={
                'ordering': ['ordering'],
                'abstract': False,
                'verbose_name_plural': 'content navigations',
                'db_table': 'page_page_contentnavigationwidget',
                'verbose_name': 'content navigation',
                'permissions': [],
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='ContextNavigationWidget',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('options', django_extensions.db.fields.json.JSONField(verbose_name='widget options', editable=False, blank=True)),
                ('prerendered_content', models.TextField(verbose_name='prerendered content', editable=False, blank=True)),
                ('page_region', models.CharField(default=b'preview', help_text='Which region of selected pages do you wish to display.', max_length=255, verbose_name='display region', choices=[(b'col3', 'Content'), (b'col1', 'Left sidebar'), (b'col2', 'Right sidebar'), (b'header', 'Header'), (b'footer', 'Footer'), (b'toolbar', 'Toolbar'), (b'preview', 'Preview'), (b'helper', 'Helper')])),
                ('depth', models.IntegerField(default=1, help_text='Depth to which display child pages.', verbose_name='depth', choices=[(0, 'self'), (1, 'one level'), (2, 'all levels')])),
                ('link_style', models.CharField(default=b'link', choices=[(b'', 'none'), (b'link', 'link'), (b'button', 'button')], max_length=255, blank=True, help_text='Visual style of links to displayed pages.', verbose_name='link style')),
                ('link_text', models.CharField(default=b'', help_text="Arbitrary text of links. If empty, page's title will be used instead.", max_length=255, verbose_name='link texts', blank=True)),
                ('region', models.CharField(max_length=255)),
                ('ordering', models.IntegerField(default=0, verbose_name='ordering')),
            ],
            options={
                'ordering': ['ordering'],
                'abstract': False,
                'verbose_name_plural': 'contextual contents',
                'db_table': 'page_page_contextnavigationwidget',
                'verbose_name': 'contextual content',
                'permissions': [],
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='DjangoTemplateWidget',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('options', django_extensions.db.fields.json.JSONField(verbose_name='widget options', editable=False, blank=True)),
                ('prerendered_content', models.TextField(verbose_name='prerendered content', editable=False, blank=True)),
                ('template', models.TextField(verbose_name='template')),
                ('region', models.CharField(max_length=255)),
                ('ordering', models.IntegerField(default=0, verbose_name='ordering')),
            ],
            options={
                'ordering': ['ordering'],
                'abstract': False,
                'verbose_name_plural': 'django templates',
                'db_table': 'page_page_djangotemplatewidget',
                'verbose_name': 'django template',
                'permissions': [],
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='FeedReaderWidget',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('options', django_extensions.db.fields.json.JSONField(verbose_name='widget options', editable=False, blank=True)),
                ('prerendered_content', models.TextField(verbose_name='prerendered content', editable=False, blank=True)),
                ('link', models.URLField(verbose_name='link')),
                ('cached_content', models.TextField(editable=False, blank=True)),
                ('max_items', models.IntegerField(default=5, verbose_name='max. items')),
                ('last_updated', models.DateTimeField(verbose_name='last updated', null=True, editable=False, blank=True)),
                ('region', models.CharField(max_length=255)),
                ('ordering', models.IntegerField(default=0, verbose_name='ordering')),
            ],
            options={
                'ordering': ['ordering'],
                'abstract': False,
                'verbose_name_plural': 'feed readers',
                'db_table': 'page_page_feedreaderwidget',
                'verbose_name': 'feed reader',
                'permissions': [],
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='LanguageSelectorWidget',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('options', django_extensions.db.fields.json.JSONField(verbose_name='widget options', editable=False, blank=True)),
                ('prerendered_content', models.TextField(verbose_name='prerendered content', editable=False, blank=True)),
                ('region', models.CharField(max_length=255)),
                ('ordering', models.IntegerField(default=0, verbose_name='ordering')),
            ],
            options={
                'ordering': ['ordering'],
                'abstract': False,
                'verbose_name_plural': 'language selectors',
                'db_table': 'page_page_languageselectorwidget',
                'verbose_name': 'language selector',
                'permissions': [],
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='LinearNavigationWidget',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('options', django_extensions.db.fields.json.JSONField(verbose_name='widget options', editable=False, blank=True)),
                ('prerendered_content', models.TextField(verbose_name='prerendered content', editable=False, blank=True)),
                ('traverse', models.IntegerField(default=0, verbose_name='traverse', choices=[(0, 'none'), (1, 'parents'), (2, 'siblings'), (3, 'cousins')])),
                ('link', models.CharField(default=b'text', max_length=255, verbose_name='links', choices=[(b'text', 'previous/next'), (b'page', 'page title')])),
                ('region', models.CharField(max_length=255)),
                ('ordering', models.IntegerField(default=0, verbose_name='ordering')),
            ],
            options={
                'ordering': ['ordering'],
                'abstract': False,
                'verbose_name_plural': 'linear navigations',
                'db_table': 'page_page_linearnavigationwidget',
                'verbose_name': 'linear navigation',
                'permissions': [],
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='MediaFileContent',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('region', models.CharField(max_length=255)),
                ('ordering', models.IntegerField(default=0, verbose_name='ordering')),
                ('type', models.CharField(default=b'default', max_length=20, verbose_name='type', choices=[(b'default', 'default'), (b'lightbox', 'lightbox')])),
                ('mediafile', feincms.module.medialibrary.fields.MediaFileForeignKey(related_name='+', verbose_name='media file', to='medialibrary.MediaFile')),
            ],
            options={
                'ordering': ['ordering'],
                'abstract': False,
                'verbose_name_plural': 'media files',
                'db_table': 'page_page_mediafilecontent',
                'verbose_name': 'media file',
                'permissions': [],
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='Page',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('lft', models.PositiveIntegerField(editable=False, db_index=True)),
                ('rght', models.PositiveIntegerField(editable=False, db_index=True)),
                ('tree_id', models.PositiveIntegerField(editable=False, db_index=True)),
                ('level', models.PositiveIntegerField(editable=False, db_index=True)),
                ('active', models.BooleanField(default=True, verbose_name='active')),
                ('title', models.CharField(help_text='This title is also used for navigation menu items.', max_length=200, verbose_name='title')),
                ('slug', models.SlugField(help_text='This is used to build the URL for this page', max_length=150, verbose_name='slug')),
                ('in_navigation', models.BooleanField(default=False, verbose_name='in navigation')),
                ('override_url', models.CharField(help_text="Override the target URL. Be sure to include slashes at the beginning and at the end if it is a local URL. This affects both the navigation and subpages' URLs.", max_length=255, verbose_name='override URL', blank=True)),
                ('redirect_to', models.CharField(help_text='Target URL for automatic redirects or the primary key of a page.', max_length=255, verbose_name='redirect to', blank=True)),
                ('_cached_url', models.CharField(default='', editable=False, max_length=255, blank=True, verbose_name='Cached URL', db_index=True)),
                ('publication_date', models.DateTimeField(default=feincms.module.extensions.datepublisher.granular_now, verbose_name='publication date')),
                ('publication_end_date', models.DateTimeField(help_text='Leave empty if the entry should stay active forever.', null=True, verbose_name='publication end date', blank=True)),
                ('language', models.CharField(default=b'af', max_length=10, verbose_name='language', choices=[(b'af', b'Afrikaans'), (b'ar', b'Arabic'), (b'ast', b'Asturian'), (b'az', b'Azerbaijani'), (b'bg', b'Bulgarian'), (b'be', b'Belarusian'), (b'bn', b'Bengali'), (b'br', b'Breton'), (b'bs', b'Bosnian'), (b'ca', b'Catalan'), (b'cs', b'Czech'), (b'cy', b'Welsh'), (b'da', b'Danish'), (b'de', b'German'), (b'el', b'Greek'), (b'en', b'English'), (b'en-au', b'Australian English'), (b'en-gb', b'British English'), (b'eo', b'Esperanto'), (b'es', b'Spanish'), (b'es-ar', b'Argentinian Spanish'), (b'es-mx', b'Mexican Spanish'), (b'es-ni', b'Nicaraguan Spanish'), (b'es-ve', b'Venezuelan Spanish'), (b'et', b'Estonian'), (b'eu', b'Basque'), (b'fa', b'Persian'), (b'fi', b'Finnish'), (b'fr', b'French'), (b'fy', b'Frisian'), (b'ga', b'Irish'), (b'gl', b'Galician'), (b'he', b'Hebrew'), (b'hi', b'Hindi'), (b'hr', b'Croatian'), (b'hu', b'Hungarian'), (b'ia', b'Interlingua'), (b'id', b'Indonesian'), (b'io', b'Ido'), (b'is', b'Icelandic'), (b'it', b'Italian'), (b'ja', b'Japanese'), (b'ka', b'Georgian'), (b'kk', b'Kazakh'), (b'km', b'Khmer'), (b'kn', b'Kannada'), (b'ko', b'Korean'), (b'lb', b'Luxembourgish'), (b'lt', b'Lithuanian'), (b'lv', b'Latvian'), (b'mk', b'Macedonian'), (b'ml', b'Malayalam'), (b'mn', b'Mongolian'), (b'mr', b'Marathi'), (b'my', b'Burmese'), (b'nb', b'Norwegian Bokmal'), (b'ne', b'Nepali'), (b'nl', b'Dutch'), (b'nn', b'Norwegian Nynorsk'), (b'os', b'Ossetic'), (b'pa', b'Punjabi'), (b'pl', b'Polish'), (b'pt', b'Portuguese'), (b'pt-br', b'Brazilian Portuguese'), (b'ro', b'Romanian'), (b'ru', b'Russian'), (b'sk', b'Slovak'), (b'sl', b'Slovenian'), (b'sq', b'Albanian'), (b'sr', b'Serbian'), (b'sr-latn', b'Serbian Latin'), (b'sv', b'Swedish'), (b'sw', b'Swahili'), (b'ta', b'Tamil'), (b'te', b'Telugu'), (b'th', b'Thai'), (b'tr', b'Turkish'), (b'tt', b'Tatar'), (b'udm', b'Udmurt'), (b'uk', b'Ukrainian'), (b'ur', b'Urdu'), (b'vi', b'Vietnamese'), (b'zh-cn', b'Simplified Chinese'), (b'zh-hans', b'Simplified Chinese'), (b'zh-hant', b'Traditional Chinese'), (b'zh-tw', b'Traditional Chinese')])),
                ('meta_keywords', models.TextField(help_text='Keywords are ignored by most search engines.', verbose_name='meta keywords', blank=True)),
                ('meta_description', models.TextField(help_text='This text is displayed on the search results page. It is however not used for the SEO ranking. Text longer than 140 characters is truncated.', verbose_name='meta description', blank=True)),
                ('creation_date', models.DateTimeField(verbose_name='creation date', null=True, editable=False)),
                ('modification_date', models.DateTimeField(verbose_name='modification date', null=True, editable=False)),
                ('template_key', models.CharField(default=b'base', max_length=255, verbose_name='template', choices=[(b'base', 'Standard'), (b'api', 'API')])),
                ('parent', models.ForeignKey(related_name='children', verbose_name='Parent', blank=True, to='page.Page', null=True)),
                ('related_pages', models.ManyToManyField(help_text='Select pages that should be listed as related content.', related_name='page_page_related', null=True, to='page.Page', blank=True)),
                ('symlinked_page', models.ForeignKey(related_name='page_page_symlinks', blank=True, to='page.Page', help_text='All content is inherited from this page if given.', null=True, verbose_name='symlinked page')),
                ('translation_of', models.ForeignKey(related_name='translations', blank=True, to='page.Page', help_text='Leave this empty for entries in the primary language.', null=True, verbose_name='translation of')),
            ],
            options={
                'ordering': ['tree_id', 'lft'],
                'verbose_name': 'page',
                'verbose_name_plural': 'pages',
            },
            bases=(models.Model, feincms.extensions.ExtensionsMixin, feincms.module.mixins.ContentModelMixin),
        ),
        migrations.CreateModel(
            name='PageTitleWidget',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('options', django_extensions.db.fields.json.JSONField(verbose_name='widget options', editable=False, blank=True)),
                ('prerendered_content', models.TextField(verbose_name='prerendered content', editable=False, blank=True)),
                ('region', models.CharField(max_length=255)),
                ('ordering', models.IntegerField(default=0, verbose_name='ordering')),
                ('parent', models.ForeignKey(related_name='pagetitlewidget_set', to='page.Page')),
            ],
            options={
                'ordering': ['ordering'],
                'abstract': False,
                'verbose_name_plural': 'page titles',
                'db_table': 'page_page_pagetitlewidget',
                'verbose_name': 'page title',
                'permissions': [],
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='RichTextContent',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('text', feincms.contrib.richtext.RichTextField(verbose_name='text', blank=True)),
                ('region', models.CharField(max_length=255)),
                ('ordering', models.IntegerField(default=0, verbose_name='ordering')),
                ('parent', models.ForeignKey(related_name='richtextcontent_set', to='page.Page')),
            ],
            options={
                'ordering': ['ordering'],
                'abstract': False,
                'verbose_name_plural': 'rich texts',
                'db_table': 'page_page_richtextcontent',
                'verbose_name': 'rich text',
                'permissions': [],
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='SiteMapWidget',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('options', django_extensions.db.fields.json.JSONField(verbose_name='widget options', editable=False, blank=True)),
                ('prerendered_content', models.TextField(verbose_name='prerendered content', editable=False, blank=True)),
                ('region', models.CharField(max_length=255)),
                ('ordering', models.IntegerField(default=0, verbose_name='ordering')),
                ('parent', models.ForeignKey(related_name='sitemapwidget_set', to='page.Page')),
            ],
            options={
                'ordering': ['ordering'],
                'abstract': False,
                'verbose_name_plural': 'site maps',
                'db_table': 'page_page_sitemapwidget',
                'verbose_name': 'site map',
                'permissions': [],
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='SiteSearchWidget',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('options', django_extensions.db.fields.json.JSONField(verbose_name='widget options', editable=False, blank=True)),
                ('prerendered_content', models.TextField(verbose_name='prerendered content', editable=False, blank=True)),
                ('engine', models.CharField(default=b'google', max_length=255, verbose_name='engine', choices=[(b'gooole', 'Google Custom Search'), (b'haystack', 'Django Haystack')])),
                ('inline', models.BooleanField(default=False, verbose_name='inline')),
                ('region', models.CharField(max_length=255)),
                ('ordering', models.IntegerField(default=0, verbose_name='ordering')),
                ('parent', models.ForeignKey(related_name='sitesearchwidget_set', to='page.Page')),
            ],
            options={
                'ordering': ['ordering'],
                'abstract': False,
                'verbose_name_plural': 'site searches',
                'db_table': 'page_page_sitesearchwidget',
                'verbose_name': 'site search',
                'permissions': [],
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='TableWidget',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('options', django_extensions.db.fields.json.JSONField(verbose_name='widget options', editable=False, blank=True)),
                ('prerendered_content', models.TextField(verbose_name='prerendered content', editable=False, blank=True)),
                ('html', models.TextField(verbose_name=b'HTML', editable=False, blank=True)),
                ('region', models.CharField(max_length=255)),
                ('ordering', models.IntegerField(default=0, verbose_name='ordering')),
                ('type', models.CharField(default=b'plain', max_length=20, verbose_name='type', choices=[(b'plain', 'plain'), (b'titlerow', 'title row'), (b'titlerowcol', 'title row and column')])),
                ('data', models.TextField(verbose_name='data', blank=True)),
                ('parent', models.ForeignKey(related_name='tablewidget_set', to='page.Page')),
            ],
            options={
                'ordering': ['ordering'],
                'abstract': False,
                'verbose_name_plural': 'tables',
                'db_table': 'page_page_tablewidget',
                'verbose_name': 'table',
                'permissions': [],
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='TreeNavigationWidget',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('options', django_extensions.db.fields.json.JSONField(verbose_name='widget options', editable=False, blank=True)),
                ('prerendered_content', models.TextField(verbose_name='prerendered content', editable=False, blank=True)),
                ('orientation', models.CharField(default=b'horizontal', max_length=255, verbose_name='orientation', choices=[(b'horizontal', 'horizontal'), (b'vertical', 'vertical')])),
                ('priority', models.CharField(default=b'primary', max_length=255, verbose_name='priority', choices=[(b'primary', 'primary'), (b'secondary', 'secondary'), (b'common', 'common')])),
                ('depth', models.IntegerField(default=1, verbose_name='depth', choices=[(1, 'only one level'), (2, 'subpages too')])),
                ('region', models.CharField(max_length=255)),
                ('ordering', models.IntegerField(default=0, verbose_name='ordering')),
                ('parent', models.ForeignKey(related_name='treenavigationwidget_set', to='page.Page')),
                ('root', models.ForeignKey(related_name='taxonomy_root', blank=True, to='page.Page', help_text="If no root page is set, widget's parent page will be used.", null=True, verbose_name='root page')),
            ],
            options={
                'ordering': ['ordering'],
                'abstract': False,
                'verbose_name_plural': 'navigation menus',
                'db_table': 'page_page_treenavigationwidget',
                'verbose_name': 'navigation menu',
                'permissions': [],
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='UserLoginWidget',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('options', django_extensions.db.fields.json.JSONField(verbose_name='widget options', editable=False, blank=True)),
                ('prerendered_content', models.TextField(verbose_name='prerendered content', editable=False, blank=True)),
                ('inline', models.BooleanField(default=False, verbose_name='inline')),
                ('region', models.CharField(max_length=255)),
                ('ordering', models.IntegerField(default=0, verbose_name='ordering')),
                ('parent', models.ForeignKey(related_name='userloginwidget_set', to='page.Page')),
            ],
            options={
                'ordering': ['ordering'],
                'abstract': False,
                'verbose_name_plural': 'user logins',
                'db_table': 'page_page_userloginwidget',
                'verbose_name': 'user login',
                'permissions': [],
            },
            bases=(models.Model,),
        ),
        migrations.AddField(
            model_name='mediafilecontent',
            name='parent',
            field=models.ForeignKey(related_name='mediafilecontent_set', to='page.Page'),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='linearnavigationwidget',
            name='parent',
            field=models.ForeignKey(related_name='linearnavigationwidget_set', to='page.Page'),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='languageselectorwidget',
            name='parent',
            field=models.ForeignKey(related_name='languageselectorwidget_set', to='page.Page'),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='feedreaderwidget',
            name='parent',
            field=models.ForeignKey(related_name='feedreaderwidget_set', to='page.Page'),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='djangotemplatewidget',
            name='parent',
            field=models.ForeignKey(related_name='djangotemplatewidget_set', to='page.Page'),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='contextnavigationwidget',
            name='parent',
            field=models.ForeignKey(related_name='contextnavigationwidget_set', to='page.Page'),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='contextnavigationwidget',
            name='root',
            field=models.ForeignKey(related_name='context_root', blank=True, to='page.Page', help_text='The child pages of root page are displayed in the context navigation.', null=True, verbose_name='source'),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='contentnavigationwidget',
            name='parent',
            field=models.ForeignKey(related_name='contentnavigationwidget_set', to='page.Page'),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='breadcrumbswidget',
            name='parent',
            field=models.ForeignKey(related_name='breadcrumbswidget_set', to='page.Page'),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='applicationcontent',
            name='parent',
            field=models.ForeignKey(related_name='applicationcontent_set', to='page.Page'),
            preserve_default=True,
        ),
    ]
